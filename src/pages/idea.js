import React from 'react'
import PrismCodeBlock from '../components/PrismCodeBlock';
import { ideaCodeBlocks } from '../utils/codeBlocks';
import Image from 'next/image';
import Link from 'next/link';

export default function idea() {
    return (
        <div className="phi-container idea-container contrast-style-2">
            <section>
                <h3 className="text-center">The idea</h3>
                <div className="phi-full-width">
                    {/* banner image to be used here. */}
                </div>
                <p className="text-justify">
                    The whole idea revolves around the golden ratio i.e. 1.618. From grid, typography, tables, buttons, form components, spacing to colors almost everything is based on this divine number.
                </p>
            </section>
            <section>
                <h4>Defining the base</h4>
                <p>
                    This framework uses the number <code>1.618</code>, so a variable is defined in the SASS as follows with other rem variables derived from this number:
                </p>
                <PrismCodeBlock codeBlock={ideaCodeBlocks.baseVariablesCodeBlock} />
                <p>
                    As you can see here <code>1rem</code> with <code>$phi</code> is used to compute the value of the other two variables. These computed values are primarily used for margin and padding. These three variables play an essential role in the framework. Read the content below to see how they are used throughout the framework.
                </p>
            </section>
            <section>
                <h4>Grid</h4>
                <p>
                    The columns are generated based on the generation of the golden rectangles. Grid is curated based on the full width in terms of percentage i.e. 100%. The base column (class names: <code>.phi-col-0</code> and <code>.phi-col-base</code>) utilizes 100% width. Other columns are then derived based on this column. The column width (dividend) is divided using the <code>$phi</code> (devisor), the resultant value (quotient) is the width of next column then the resultant value is subtracted from the dividend's width to get another new column. This method is used iteratively to create columns. See the gif below to get an idea.
                </p>
                <figure>
                    <Image className="phi-image" src="/gifs/grid_animation.gif" width="800px" height="600px" />
                    <figcaption></figcaption>
                </figure>
                <p>
                    This framework supports only eight columns because columns are curated irrationally as the 1.618 number is irrational. Even if we go beyond these eight columns, the columns wouldn't be useful in real-life examples, as their width is much smaller.
                </p>
                <p>
                    Let's see how other columns are implemented. Following code shows the SASS variables representing the column width.
                </p>
                <PrismCodeBlock codeBlock={ideaCodeBlocks.gridGenerationCodeBlock} />
                <p>
                    If you notice the columns, there is one column missing in the above code. The missing column is <code>$phiCol1</code>. Well, this column has a different implementation than the above columns. It is implemented in this way:
                </p>
                <PrismCodeBlock codeBlock={ideaCodeBlocks.col1GenerationCodeBlock} />
            </section>
            <section>
                <h4>Typography</h4>
                <p>
                    In this framework, typography extensively uses the cardinal three variables for font size, line height, word spacing, letter spacing and spacing (margin and padding). But here we will only focus on some of the primary factors because the rest of the things you can find in the <code>typography.scss</code> file. In this section only essential things like how headers are using the cardinal variable, the fluid typography, etc.
                </p>
                <h5>Headers</h5>
                <p>
                    Headers are created using <code>$phi variable</code>. See the code below:
                </p>
                <PrismCodeBlock codeBlock={ideaCodeBlocks.headersCodeBlock} />
                <p>
                    As you can see <code>$h5</code> is initialized to <code>1rem</code> which will be equivalent to the body's font size. Then <code>$h4</code> header is then generated by multiplying the <code>$h5</code> value with <code>$phi</code>. Similar process is used to generate the headers till <code>$h1</code> is calculated. For <code>$h6</code> header, <code>$h5</code> value is divided by the <code>$phi</code> value. Since these headers are using <code>rem</code> unit, these headers will show their fluidity as the window resizes.
                </p>
                <h5>Fluid typography</h5>
                <p>
                    The fluid typography feature is <s>inspired</s> stolen from <Link href="https://css-tricks.com/snippets/css/fluid-typography/"><a className="link link-primary">CSS tricks</a></Link>. You can read the article to know more about it.
                </p>
            </section>
            <section>
                <h4>
                    Colors
                </h4>
                <p>
                    The standard colors in the framework are defined and then using those standard colors with <code>$phi</code>, tints and shades are generated using the mix function from SASS.
                </p>
                <p>
                    The function for the tint and shade is defined like this in <code>_.function.scss</code>. The tint function is mixes the white color in the provided standard color (first parameter) depending on the percentage provided as the second parameter.
                </p>
                <PrismCodeBlock codeBlock={ideaCodeBlocks.tintColorCodeBlock} />
                <p>
                    Similarly, for shade color it is defined in the following way. This function mixes the black color in the provided color through the parameter depending on the percentage provided in the second parameter.
                </p>
                <PrismCodeBlock codeBlock={ideaCodeBlocks.shadeColorCodeBlock} />
            </section>
        </div>
    )
}
